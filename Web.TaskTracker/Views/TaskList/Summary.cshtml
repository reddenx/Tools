@model Web.TaskTracker.Models.ViewModels.TaskList.TaskListViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts
{
    <script>
        function TreeItem(serverItem, parentViewModel) {
            var self = this;

            //Data
            self.TaskId = ko.observable(serverItem.Item.TaskId);
            self.ParentTaskId = serverItem.Item.ParentTaskId;

            self.Name = ko.observable(serverItem.Item.Name);
            self.Description = ko.observable(serverItem.Item.Description);
            self.CurrentStatus = ko.observable(serverItem.Item.CurrentStatus);
            self.DateCreated = ko.observable(serverItem.Item.DateCreated);
            self.DateCompleted = ko.observable(serverItem.Item.DateCompleted);

            self.Parent = parentViewModel;
            self.Children = ko.observableArray();
            self.Backup = {};

            //visual 
            self.ShowingCompleteChildren = ko.observable(false);
            self.IsEditing = ko.observable(false);
            self.IsBusy = ko.observable(false);
            self.Error = ko.observable('');
            self.ShowChildren = ko.observable(false);
            self.ShowExpander = ko.computed(function () {
                return self.Children().length > 0
                    || !!self.Description();
            });
            self.ShowDescription = ko.observable(false);

            //methods
            self.ResetValues = function (model) {
                self.TaskId(model.TaskId);
                self.Name(model.Name);
                self.Description(model.Description);
                self.CurrentStatus(model.CurrentStatus);
                self.DateCreated(model.DateCreated);
                self.DateCompleted(model.DateCreated);
                self.Description(model.Description);
            }

            self.ToggleChildren = function () {
                if (self.ShowChildren() && !self.IsEditing()) {
                    self.ShowDescription(false);
                }

                self.ShowChildren(!self.ShowChildren());
            }

            self.AddChild = function () {
                var child = new TreeItem({ Item: {}, Children: [] }, self);
                child.IsEditing(true);
                child.ParentTaskId = self.TaskId();
                child.Parent = self;

                self.ShowChildren(true);
                self.Children.push(child);
            }

            self.Save = function () {
                self.IsBusy(true);
                self.Error('');

                

                $.ajax({
                    url: 'SaveTask',
                    dataType: 'json',
                    type: 'POST',
                    data: self.GetSaveData(),
                    success: function (result) {
                        if (result.success) {
                            self.IsEditing(false);
                            self.ResetValues(result.data);
                            self.SetBackup(result.data);

                            //collapse description if it's been emptied
                            if (self.Description() != null && self.Description().length <= 0) {
                                self.ShowDescription(false);
                            }
                        }
                        else {
                            self.Error(result.error);
                        }
                    },
                    error: function () {
                        self.Error('Could not save');
                    },
                    complete: function () {
                        self.IsBusy(false);
                    }
                });
            }

            self.GetSaveData = function () {
                return {
                    'TaskId': self.TaskId(),
                    'ParentTaskId': self.ParentTaskId,
                    'TaskName': self.Name(),
                    'Description': self.Description(),
                    'CurrentStatus': self.CurrentStatus(),
                }
            }

            self.CancelEdits = function () {
                self.ResetValues(self.Backup);
                self.IsEditing(false);

                if (!self.Description()) {
                    self.ShowDescription(false);
                }

                if (!self.TaskId()) {
                    self.Parent.Children.remove(self);
                }
            }

            self.SetBackup = function (model) {
                self.Backup.Name = model.Name;
                self.Backup.TaskId = model.TaskId;
                self.Backup.Description = model.Description;
                self.Backup.CurrentStatus = model.CurrentStatus;
                self.Backup.DateCreated = model.DateCreated;
                self.Backup.DateCompleted = model.DateCompleted;
                self.Backup.Description = model.Description;
            }

            self.ShowCompletedChildren = function () {
                self.ShowingCompleteChildren(true);
                $.ajax({
                    url: 'GetAllChildrenForTask',
                    dataType: 'json',
                    type: 'POST',
                    data: { 'taskId': self.TaskId() },
                    success: function (response) {
                        if (response.success) {
                            self.HandleCompletedChildrenReply(response.data);
                        }
                        else {
                            self.ShowingCompleteChildren(false);
                        }
                    },
                    error: function () {
                        self.ShowingCompleteChildren(false);
                    }
                });
            }

            self.HandleCompletedChildrenReply = function (data) {

                $.each(data, function (index, item) {
                    var match = ko.utils.arrayFirst(self.Children(), function (childItem) {
                        return childItem.TaskId() === item.Item.TaskId;
                    });

                    if (!match) {
                        self.Children.push(new TreeItem(item, self));
                    }
                });
            }

            //build children
            $.each(serverItem.Children, function (index, item) {
                self.Children.push(new TreeItem(item, self));
            });

            //setup backup
            self.SetBackup(serverItem.Item);

            return self;
        }

        function AutoGrow(sender) {
            if (sender.scrollHeight > sender.clientHeight) {
                sender.style.height = sender.scrollHeight + "px";
            }
        }

        var KVP = function (name, id) {
            this.Key = name;
            this.Id = id;
        }

        var ViewModel = new function (serverModel) {
            var self = this;

            self.TaskStatuses = [
                new KVP('Active', 0),
                new KVP('Complete', 1),
                new KVP('Cancelled', 2),
            ];

            self.Root = ko.observableArray();

            $.each(serverModel.RootItems, function (index, item) {
                self.Root.push(new TreeItem(item));
            });
        }(@Html.Raw(Json.Encode(Model)));

        $(document).ready(function () {
            ko.applyBindings(ViewModel);
        });
    </script>
}

<div style="min-width: 1280px;">
    <!-- ko foreach: Root -->
    <div data-bind="template: { name: 'child-template', data: $data }"></div>
    <!-- /ko -->

    <script type="text/html" id="child-template">
        <div class="TaskContainer">
            <div class="TaskBox" data-bind="css: { 'Active': CurrentStatus() === 0, 'Inactive': CurrentStatus() === 1, 'Cancelled': CurrentStatus() === 2}">

                <div class="Box BoxLeft">
                    <button type="button" class="ExpanderButton" data-bind="click: ToggleChildren, css: { 'Expanded': ShowChildren, 'Collapsed': !ShowChildren()}"></button>
                </div>

                <div class="Box BoxCenter" data-bind="visible: !IsEditing()">
                    <div class="TaskTitle">
                        <span class="TaskName" data-bind="click: function() {IsEditing(true);}, text: Name"></span>
                    </div>
                </div>

                <div class="Box BoxRight" data-bind="visible: !IsEditing()">
                    <div class="TaskCount">
                        <span data-bind="text: Children().length"></span>
                    </div>
                </div>

                <div class="Box BoxRight" data-bind="visible: !IsEditing() && Description() != null && Description().length > 0">
                    <button type="button" class="ExpanderButton DescriptionExpander" data-bind="click: function() { ShowDescription(!ShowDescription()); }"></button>
                </div>

                <div class="Box BoxRight" style="border-left: none" data-bind="visible: IsEditing">
                    <button class="ConfirmButton Save" data-bind="click: Save"></button>
                    <button class="ConfirmButton Cancel" data-bind="click: CancelEdits"></button>

                    <input type="text" class="TaskTitleInput" data-bind="value: Name" />


                    <button class="StatusButton CancelledStatus" data-bind="click: function() { CurrentStatus(2) }, css: { 'active': CurrentStatus() === 2 }"></button>
                    <button class="StatusButton InactiveStatus" data-bind="click: function() { CurrentStatus(1) }, css: { 'active': CurrentStatus() === 1 }"></button>
                    <button class="StatusButton ActiveStatus" data-bind="click: function() { CurrentStatus(0) }, css: { 'active': CurrentStatus() === 0 }"></button>
                    <button type="button" class="ExpanderButton StatusButton  DescriptionExpander" data-bind="click: function() { ShowDescription(!ShowDescription()); }"></button>

                </div>
            </div>

            <div class="TaskDescriptionContainer" data-bind="visible: ShowDescription()">
                <p class="TaskDescription" data-bind="text: Description, visible: !IsEditing()"></p>
                <textarea class="AutoSizing" onkeyup="AutoGrow(this);" onmousedown="AutoGrow(this)" data-bind="value: Description, visible: IsEditing()"></textarea>
            </div>
        </div>

        <div class="TaskChildContainer" data-bind="visible: ShowChildren() && Children().length>0">
            <!-- ko foreach: Children -->
            <div data-bind="template: { name: 'child-template', data: $data }"></div>
            <!-- /ko -->
        </div>
        <div class="TaskChildOptions" data-bind="visible: ShowChildren() && TaskId() != null">
            <a href="#" class="ChildActionLink" data-bind="click: AddChild">Add Task</a>
            <a href="#" class="ChildActionLink" data-bind="click: ShowCompletedChildren, visible: !ShowingCompleteChildren()">Show completed</a>
        </div>
    </script>

</div>
